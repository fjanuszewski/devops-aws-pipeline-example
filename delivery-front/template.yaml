AWSTemplateFormatVersion: 2010-09-09
Transform:
- AWS::Serverless-2016-10-31
Description: 'Template de pipeline para ambiente de FrontEnd'
Parameters:
  ProjectId:
    Type: String
    Description: Project ID.
    AllowedPattern: '^[a-z]([a-z0-9-])+$'
    ConstraintDescription: >-
      Project IDs must be between 2 and 15 characters, begin with a letter, and
      only contain lowercase letters, numbers, and hyphens (-).
    MinLength: 2
    MaxLength: 15
  RepositoryName:
    Type: String
    Description: AWS CodeCommit repository name.
    MinLength: 1
    MaxLength: 100
Resources:

  LambdaCreateInvalidation:
    Type: 'AWS::Serverless::Function'
    Properties:
      FunctionName: 
        Fn::Sub: "${AWS::StackName}-createInvalidation"
      Handler: index.handler
      Runtime: nodejs12.x
      CodeUri: ./lambda/createInvalidation
      Description: 'Lambda createInvalidation'
      MemorySize: 128
      Timeout: 15
      Policies:
        - AWSLambdaExecute
        - Version: '2012-10-17' 
          Statement:
            -
              Effect: "Allow"
              Action:
                - "lambda:InvokeFunction"
                - "lambda:InvokeAsync"
                - "lambda:GetFunction"
              Resource: "*"
            -
              Effect: "Allow"
              Action:
                - "logs:CreateLogStream"
                - "logs:PutLogEvents"
                - "logs:CreateLogGroup"
              Resource: "*"
            -
              Effect: "Allow"
              Action:
                - "cloudformation:ListExports"
              Resource: "*"
            -
              Effect: "Allow"
              Action:
                - "cloudfront:CreateInvalidation"
              Resource: "*"
            -
              Effect: "Allow"
              Action:
                - "codepipeline:PutJobSuccessResult"
              Resource: "*"
            
  CloudFormationTrustRole:
    Type: 'AWS::IAM::Role'
    Description: Creating service role in IAM for AWS CloudFormation
    Properties:
      Path: /
      RoleName: !Join 
        - '-'
        - - DeliveryWorker
          - !Ref ProjectId
          - CloudFormation
      Policies:
        - PolicyName: DeliveryWorkerCloudFormationRolePolicy
          PolicyDocument:
            Statement:
              - Action:
                  - '*'
                Resource: '*'
                Effect: Allow
      AssumeRolePolicyDocument:
        Statement:
          - Action: 'sts:AssumeRole'
            Effect: Allow
            Principal:
              Service:
                - cloudformation.amazonaws.com
  S3Bucket:
    Type: 'AWS::S3::Bucket'
    Description: Creating Amazon S3 bucket for AWS CodePipeline artifacts
    Properties:
      BucketName: !Join 
        - '-'
        - - aws
          - delivery
          - !Ref 'AWS::Region'
          - !Ref 'AWS::AccountId'
          - !Ref ProjectId
          - pipe
      VersioningConfiguration:
        Status: Enabled
      Tags:
        - Value: !Join 
            - '-'
            - - !Ref ProjectId
              - S3Bucket
          Key: Name
  ToolChainRole:
    Type: 'AWS::IAM::Role'
    Description: Creating toolchain role in IAM for Amazon EC2 instances
    Properties:
      Path: /
      ManagedPolicyArns:
        - !Sub 'arn:${AWS::Partition}:iam::aws:policy/AWSCodeCommitFullAccess'
        - !Sub 'arn:${AWS::Partition}:iam::aws:policy/AWSCodeBuildAdminAccess'
        - !Sub 'arn:${AWS::Partition}:iam::aws:policy/AWSCodeDeployFullAccess'
        - !Sub 'arn:${AWS::Partition}:iam::aws:policy/AWSCodePipelineFullAccess'
        - !Sub 'arn:${AWS::Partition}:iam::aws:policy/AWSElasticBeanstalkFullAccess'
        - !Sub 'arn:${AWS::Partition}:iam::aws:policy/AWSLambdaFullAccess'
        - !Sub 'arn:${AWS::Partition}:iam::aws:policy/CloudWatchEventsFullAccess'
        - 'arn:aws:iam::aws:policy/AmazonS3FullAccess'
      RoleName: !Sub 'DeliveryWorker-${ProjectId}-ToolChain'
      Policies:
        - PolicyName: ToolChainWorkerPolicy
          PolicyDocument:
            Statement:
              - Action:
                  - 'kms:GenerateDataKey*'
                  - 'kms:Encrypt'
                  - 'kms:Decrypt'
                Resource: '*'
                Effect: Allow
      AssumeRolePolicyDocument:
        Statement:
          - Action: 'sts:AssumeRole'
            Effect: Allow
            Principal:
              Service:
                - codebuild.amazonaws.com
                - codedeploy.amazonaws.com
                - codepipeline.amazonaws.com
                - elasticbeanstalk.amazonaws.com
                - events.amazonaws.com
                - lambda.amazonaws.com
  ProjectPipelineDevelop:
    DependsOn:
      - ToolChainRole
      - S3Bucket
      - CodeBuildProject
      - CloudFormationTrustRole
    Type: 'AWS::CodePipeline::Pipeline'
    Description: Creating a deployment pipeline for your project in AWS CodePipeline
    Properties:
      ArtifactStore:
        Type: S3
        Location: !Ref S3Bucket
      Stages:
        - Actions:
            - ActionTypeId:
                Owner: AWS
                Category: Source
                Version: 1
                Provider: CodeCommit
              Configuration:
                PollForSourceChanges: false
                RepositoryName: !Ref RepositoryName
                BranchName: develop
              InputArtifacts: []
              OutputArtifacts:
                - Name: !Sub 'SourceArtifact'
              RunOrder: 1
              Name: ApplicationSource
          Name: Source
        - Actions:
            - ActionTypeId:
                Owner: AWS
                Category: Build
                Version: 1
                Provider: CodeBuild
              Configuration:
                ProjectName: !Ref ProjectId
              InputArtifacts:
                - Name: !Sub 'SourceArtifact'
              OutputArtifacts:
                - Name: !Sub 'BuildArtifact'
                - Name: !Sub 'TemplateArtifact'
              RunOrder: 1
              Name: PackageExport
          Name: Build
        - Actions:
            - ActionTypeId:
                Owner: AWS
                Category: Deploy
                Version: 1
                Provider: CloudFormation
              Configuration:
                TemplatePath: !Sub 'TemplateArtifact::template-export.yaml'
                ActionMode: CHANGE_SET_REPLACE
                Capabilities: CAPABILITY_NAMED_IAM
                ChangeSetName: pipeline-changeset
                RoleArn: !GetAtt 
                  - CloudFormationTrustRole
                  - Arn
                StackName: !Sub '${ProjectId}-front-develop'
              InputArtifacts:
                - Name: !Sub 'TemplateArtifact'
              OutputArtifacts: []
              RunOrder: 1
              Name: GenerateChangeSet
            - ActionTypeId:
                Owner: AWS
                Category: Deploy
                Version: 1
                Provider: CloudFormation
              Configuration:
                ActionMode: CHANGE_SET_EXECUTE
                ChangeSetName: pipeline-changeset
                StackName: !Sub '${ProjectId}-front-develop'
              InputArtifacts: []
              OutputArtifacts: []
              RunOrder: 2
              Name: ExecuteChangeSet
          Name: DeployStack
        - Actions:
            - ActionTypeId:
                Owner: AWS
                Category: Deploy
                Version: 1
                Provider: S3
              Configuration:
                BucketName: !Sub '${ProjectId}-front-develop'
                Extract: true
                CannedACL: public-read
                CacheControl: "public, max-age=3600"
              InputArtifacts:
                - Name: !Sub 'BuildArtifact'
              RunOrder: 1
              Name: UploadFilesToS3
            - ActionTypeId:
                Owner: AWS
                Category: Invoke
                Version: 1
                Provider: Lambda
              Configuration:
                FunctionName: !Ref LambdaCreateInvalidation
                UserParameters: !Sub '${ProjectId}-front-develop-PortalDistribution'
              InputArtifacts: []
              RunOrder: 2
              Name: CloudFrontInvalidation
          Name: DeployDist
      RoleArn: !GetAtt 
        - ToolChainRole
        - Arn
      Name: !Sub '${ProjectId}-Pipeline-develop'

  CodeBuildProject:
    Condition: CreateCodeBuildResources
    DependsOn:
      - ToolChainRole
    Type: 'AWS::CodeBuild::Project'
    Properties:
      Artifacts:
        Type: codepipeline
        Packaging: zip
      SecondaryArtifacts: 
        - ArtifactIdentifier: !Ref ProjectId
          EncryptionDisabled: false
          Packaging: zip
          Type: s3
          Location: !Ref S3Bucket
          Name: dist.zip
          OverrideArtifactName: true
          # Path: String
      Description: !Join 
        - ''
        - - 'AWS Delivery created CodeBuild Project for '
          - !Ref ProjectId
      ServiceRole: !Ref ToolChainRole
      Environment:
        Type: LINUX_CONTAINER
        EnvironmentVariables:
          - Value: !Ref S3Bucket
            Name: S3_BUCKET
          - Value: !Ref ProjectId
            Name: PROJECT_ID
          - Value: !Ref 'AWS::AccountId'
            Name: ACCOUNT_ID
          - Value: !Ref 'AWS::Partition'
            Name: PARTITION
        Image: 'aws/codebuild/standard:3.0'
        ComputeType: small
      Source:
        Type: codepipeline
      Name: !Ref ProjectId

  S3ArtifactBucketPolicy:
    Type: 'AWS::S3::BucketPolicy'
    Description: Setting Amazon S3 bucket policy for AWS CodePipeline access
    Properties:
      Bucket: !Ref S3Bucket
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Condition:
              Bool:
                'aws:SecureTransport': false
            Action:
              - 's3:GetObject'
              - 's3:GetObjectVersion'
              - 's3:GetBucketVersioning'
            Resource:
              - !Sub 'arn:${AWS::Partition}:s3:::${S3Bucket}'
              - !Sub 'arn:${AWS::Partition}:s3:::${S3Bucket}/*'
            Effect: Allow
            Principal:
              AWS:
                - !GetAtt 
                  - ToolChainRole
                  - Arn
                - !GetAtt 
                  - CloudFormationTrustRole
                  - Arn
            Sid: WhitelistedGet
          - Action:
              - 's3:PutObject'
            Resource:
              - !Sub 'arn:${AWS::Partition}:s3:::${S3Bucket}'
              - !Sub 'arn:${AWS::Partition}:s3:::${S3Bucket}/*'
            Effect: Allow
            Principal:
              AWS:
                - !GetAtt 
                  - ToolChainRole
                  - Arn
            Sid: WhitelistedPut
        Id: SSEAndSSLPolicy
  
  CodeCommitRepo:
    Type: 'AWS::CodeCommit::Repository'
    Description: Creating AWS CodeCommit repository for application source code
    Properties:
      RepositoryName: !Ref RepositoryName
      RepositoryDescription: !Join 
        - ''
        - - !Ref ProjectId
          - ' project repository'
          
  CodeDeployTrustRole:
    Type: 'AWS::IAM::Role'
    Description: The service role to be created in IAM for AWS CodeDeploy
    Properties:
      Path: /
      ManagedPolicyArns:
        - !Sub >-
          arn:${AWS::Partition}:iam::aws:policy/service-role/AWSCodeDeployRoleForLambda
      RoleName: !Sub 'DeliveryWorker-${ProjectId}-CodeDeploy'
      AssumeRolePolicyDocument:
        Statement:
          - Action: 'sts:AssumeRole'
            Effect: Allow
            Principal:
              Service:
                - codedeploy.amazonaws.com
  SourceEventDevelop:
    Type: 'AWS::Events::Rule'
    Properties:
      EventPattern:
        detail-type:
          - CodeCommit Repository State Change
        resources:
          - !GetAtt 
            - CodeCommitRepo
            - Arn
        detail:
          referenceType:
            - branch
          event:
            - referenceCreated
            - referenceUpdated
          referenceName:
            - develop
        source:
          - aws.codecommit
      Description: >-
        Rule for Amazon CloudWatch Events to detect changes to the source
        repository and trigger pipeline execution
      State: ENABLED
      Targets:
        - Id: ProjectPipelineTarget
          Arn: !Sub >-
            arn:${AWS::Partition}:codepipeline:${AWS::Region}:${AWS::AccountId}:${ProjectPipelineDevelop}
          RoleArn: !GetAtt 
            - ToolChainRole
            - Arn
      Name: !Join 
        - '-'
        - - !Ref ProjectPipelineDevelop
          - !Ref ProjectId
          - SourceEvent
  
Conditions:
  CreateCodeBuildResources: !Equals 
    - true
    - true